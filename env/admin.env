##################################################################
# admin.env
# This application suite will control the maintenance of the QSH
# environment.
##################################################################

###############################################
# Error Codes
###############################################

###############################################
# Global Definitions
###############################################

export admin_name=0
export admin_display=2
export admin_access=3

# Admin Access Levels
export ADMINISTRATOR=2
export END_USER=1
export NOT_USER=0

# QSH Authorized User ID
export QSHID=""

# Default ACL file
export admin_ACL=${sQshInit}/../dat/acl.dat

###############################################
# Function Definitions
# ADMIN
# admin_authorize
# admin_edit 
# admin_load
# admin_status
# admin_clear
# SETTER
# admin_modUser
# admin_addScheme
# admin_setAccess
# admin_setCleanPath
# admin_setColors
# admin_setPrinter
# admin_setFonts
# admin_setSchemes
# admin_setUser
# USE
# GETTER
# admin_getScheme
###############################################

###############################################
# Conditional Aliases
###############################################

#unalias admin_init
function admin_init
{
	typeset nStatus=0
	# Try to locate QSHID in acl.dat
	if [ -z "${QSHID}" ]
	then
		export QSHID=${LOGNAME}
	fi
	export admin_session=$(grep -i ${QSHID} ${admin_ACL})
	if [ -z "${admin_session}" ]
	then
		errep "${LOGNAME} is not a valid qsh username" 1 ERROR
	else
		# If valid user get their permissions
		if (( nStatus == SUCCESS ))
		then
			admin_privs=$(admin_getACL "ACCESS")
		else
			admin_privs=${NOT_USER}
		fi	
	fi
	export admin_privs
}

#unalias admin_clear
function admin_clear
{
	unset aQshModules
}

#unalias admin_edit
function admin_edit
{
	typeset name=$1
	vi ${sQshInit}/${name}.env
}
alias mod=admin_edit

#unalias admin_status
function admin_status
{
	echo "The following QSH modules have been loaded:"
	for i in $(echo "${aQshModules[*]}")
	do
		echo "${BL}${i}${NL}"
	done
}
alias qshstat=admin_status

#unalias admin_load
function admin_load
{
	typeset sModule=$1
	if [ -a ${sQshInit}/${sModule} ]
	then
		doInclude ${sQshInit} 0 ${sModule}
	else
		errep "${sModule} is not accessible" 1 ERROR
	fi
}

#unalias admin_setCleanPath
function admin_setCleanPath
{
	typeset sPath=$(echo "$*")
	# Clear out existing path
	export admin_clean="${HOME}"
	for i in $(echo "${sPath}")
	do
		if [ -d ${i} ]
		then
			typeset sClean="$(echo ${admin_clean}:${i})"
			admin_clean=${sClean}
		else
			errep "Cannot add ${i} to admin_clean path" 1 ERROR
		fi
	done
}

#unalias admin_getACL
function admin_getACL
{
	typeset admin_item=$1
	typeset dataPos=0
	if [ ${admin_item} = "NAME" ]
	then
		dataPos=${admin_name}
	elif [ ${admin_item} = "DISPLAY" ]
	then
		dataPos=${admin_display}
	elif [ ${admin_item} = "ACCESS" ]
	then
		dataPos=${admin_access}
	else
		dataPos=99
	fi
	if [ ${admin_item} = "NAME" ]
	then
		typeset admin_buffer=$(qobj_getName "${admin_session}" ${dataPos})
	else
		typeset admin_buffer=$(qobj_getItem "${admin_session}" ${dataPos})
	fi
	echo "${admin_buffer}"
}

#unalias admin_addUser
function admin_modUser
{
	vi ${admin_ACL}
}

#unalias admin_setSchemes
function admin_setSchemes
{
	typeset file=$1
	# Clear any previously loaded color schemes
	unset schemes
	if [ -a ${file} ]
	then
		typeset -a schemes=$(<${file}); export schemes
		MAX_RANDOM_WINS=$((${#schemes[*]}-1))
	else
		errep "${file} is not accessible" 1 ERROR
		MAX_RANDOM_WINS=0
	fi
	export MAX_RANDOM_WINS
}

#unalias admin_setColors
function admin_setColors
{
	typeset file=$1
	if [ -a ${file} ]
	then
		typeset -a colors=$(<${file}); export colors
	else
		errep "${file} is not accessible" 1 ERROR
	fi
}

#unalias admin_setFonts
function admin_setFonts
{
	typeset file=$1
	if [ -a ${file} ]
	then
		typeset -a fonts=$(<${file}); export fonts
	else
		errep "${file} is not accessible" 1 ERROR
	fi
}

#unalias admin_setUser
function admin_setUser
{
	typeset sID=$1
	# Try to locate sID in acl.dat
	admin_session=$(grep -i ${sID} ${admin_ACL} 2>/dev/null)
	ret=$?
	if (( ret == 0 ))
	then
		export QSHID=${sID}
		export admin_session
	else
		errep "${sID} is not a valid qsh username" 1 ERROR
	fi
}


function admin_panel
{
	typeset mode=$1
	typeset retval=0
	if [ -z "${mode}" ]
	then
		admin_clear; . ${sQshInit}/init.env
	fi
	if [[ $(echo "${mode}" | grep -iq "stat"; echo $?) -eq 0 ]]
	then
		admin_status
	fi
}
alias qsh=admin_panel
