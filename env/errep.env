##############################################
# errep.env
# Provides functions for error reporting
###############################################

#############################################################
# Constant values
#############################################################
export NULL=""

#############################################################
# Error Codes
#############################################################
export SUCCESS=0
export FAILURE=1
export FILE_DOES_NOT_EXIST=100
export DIR_DOES_NOT_EXIST=105
export ARG_NUMBER_ERROR=200
	
#############################################################
# function setMsgCodeLevel
# level		- Valid options 0-99
#############################################################
setMsgCodeLevel()
{
	typeset level=$1
	export msgCodeLevel=${level}
}

#############################################################
# function setErrorCodeLevel
# level		- Valid options AUDIT,DEBUG,WARN,ERROR,CRITICAL
#############################################################
setErrorCodeLevel()
{
	typeset level=$1
	export errorCodeLevel=${level}
}

#############################################################
# function errorReportModule
#############################################################
errorReportModule()
{
	typeset msgTxt=$1
	typeset sErrorCode=$2
	typeset iErrorCode=$3
	typeset sMsgCode=$4	
	typeset logFile=$5
	typeset time=$(${sDate} +%H:%M:%S)
	case ${sErrorCode} in
		"AUDIT" | \
		"DEBUG" | \
		"WARN" | \
		"ERROR" | \
		"CRITICAL" )
		typeset msg="${time} <$0> [${sMsgCode}:${sErrorCode}:${iErrorCode}] ${msgTxt}"
		;;
		* )
		typeset msg="??? ${time} <$0> [########:${iErrorCode}] ${msgTxt}"
	esac
	if [[ -z "${logFile}" ]];
	then
		echo "${msg}"
	else
		echo "${msg}" >> ${logFile} 2>&1
	fi
}

#############################################################
# function errep
#############################################################
errep()
{
	#set -xv
	typeset msgTxt=$1
	typeset iErrorCode=$2
	typeset sErrorCode=$3
	typeset sMsgCode=$4
	if [[ $(checkNumArgs $# 4 1) -ne ${SUCCESS} ]];
	then
		errorReportModule "USAGE: errep <msg> <iError> <sError> <sMsgCode>" DEBUG 0 ${msgCodeLevel} ${LOGFILE}
	else

		if [[ -z "${iErrorCode}" ]];
		then
			iErrorCode=0
		fi

		if [[ -z "${sErrorCode}" ]];
		then
			sErrorCode=${errorCodeLevel}
		fi

		if [[ -z "${sMsgCode}" ]];
		then
			sMsgCode=${msgCodeLevel}
		fi

		errorReportModule "${msgTxt}" ${sErrorCode} ${iErrorCode} ${sMsgCode} ${LOGFILE}
	fi
}

#############################################################
# function checkNumArgs
# This function validates that the number of arguments passed
# to the script are acceptable.
#
# INPUT:
# given  - Total number of arguments passed
# max    - Maximum number of acceptable script arguments
# min    - optional: Used if script will run with a specified
#          number of arguments less than the max.
#############################################################
checkNumArgs()
{
   typeset given=$1
   typeset max=$2
   typeset min=$3
   typeset usage=$4
   typeset ret=0;
   if [ ! -z "${min}" ];
   then
      if [ ${given} -lt ${min} ];
      then
			if [ ! -z "${usage}" ];
			then
         	errep "${usage}" ${ARG_NUMBER_ERROR} ERROR
			fi	
         ret=${ARG_NUMBER_ERROR}
      else
         ret=${SUCCESS}
      fi
   else
      if [ ${given} -ne ${max} ];
      then
			if [ ! -z "${usage}" ];
			then
         	errep "${usage}" ${ARG_NUMBER_ERROR} ERROR
			fi	
         ret=${ARG_NUMBER_ERROR}
      else
         ret=${SUCCESS}
      fi
   fi
   echo ${ret}
}

#############################################################
# Startup Values
#############################################################
setErrorCodeLevel "DEBUG"
setMsgCodeLevel 10
