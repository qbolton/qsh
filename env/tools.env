##################################################################
# tools.env
# This file common functions used to make daily UNIX navigation and
# commands easier to deal with.
##################################################################

##################################################################
#unalias _cd
##################################################################
function _cd
{
   # Changes current directory, and alters shell prompt accordingly.
   # NOTE: The cd command must be escaped, or else it will
   # attempt to invoke the function again, and recursion will result.
   \cd "$@" >/dev/null 2>&1
   if (( $? != 0 ))
   then
      errep "[$@] does not exist. Cannot change directories." 1 WARN
   else
      #PS1='${ps1_prefix}: $PWD> '
      PS1='$PWD> '
   fi
}

##################################################################
#unalias goBack
##################################################################
function goBack
{
   _cd $OLDPWD
}

##################################################################
#unalias tools_pme
export MAXROWS=30
##################################################################
function tools_pme
{
   typeset user=$1
   if [ -z "${user}" ];
   then
		user=${LOGNAME}
   fi
   typeset text=$(ps -fu ${user})
   typeset textLen=$(ps -fu ${user} | wc -l | awk '{print $1}')
   if (( ${textLen} > ${MAXROWS} ))
   then
      print "${text}" | more
   else
      print "${text}"
   fi
}

##################################################################
#unalias tools_clean
##################################################################
function tools_clean
{
  typeset sSearchStr=""
	typeset nSilent=0
	typeset nRmAllowed=0
	typeset nStatus=0
	usage="USAGE: clean <-s> <-f file/dir name>"

	if (( $# < 1 ))
	then
		errep "${usage}" 1 WARN
		return 1
	fi

	while getopts ":sf:" opt;
	do
		case $opt in
				s ) nSilent=1 ;;
				f ) sFile=${OPTARG} ;;
				\? ) errep "${usage}" 1 WARN
				return 1 ;;
		esac
	done

	typeset sFileList=$(find $(print ${admin_clean} | tr ':' ' ') -name ${sFile} 2>/dev/null)
	if (( ${#sFileList} > 0 ))
	then	
		if (( nSilent == 0 ))
		then
			print "${RL}We will delete the following files:${NL}\n${sFileList}"
			read resp?"${RL}Wax these?${NL} "
			if [ "${resp}" != "y" ]
			then	
				errep "Exiting, will not remove files" 0 AUDIT
			else
				nRmAllowed=1
			fi
		else
			nRmAllowed=1
		fi

		if (( nRmAllowed ))
		then		
			rm -fr ${sFileList} 2>/dev/null
			nStatus=$?
		fi
	fi
	return ${nStatus}
}

##################################################################
#unalias tools_vix
##################################################################
function tools_vix
{
   FileName=$1

   if [[ -z "${FileName}" ]];
   then
      errep "USAGE: vix <file name>" 1 WARN
   else
      vi ${FileName} ; chmod +x ${FileName}
   fi
}

##################################################################
#unalias tools_browse
##################################################################
function tools_browse
{
	typeset sName=$1
	sFingerBuf=$(/usr/bin/finger ${sName})
	typeset -a List=$(print "${sFingerBuf}" | grep Login)
	if (( ${#aList[*]} > 1 ))
	then
		print "${BL}Choose from the list of possible selections:${NL}" 
		select option in $(print "${aList[*]}") 
		do
			if [ -n ${option} ]
			then
				print "${option}"
			fi
		done
	fi
}

##################################################################
#unalias tools_setSymbolic
##################################################################
function tools_setSymbolic
{
   Source=$1
   Target=$2

   if [[ $# -ne 2 ]];
   then
      errep "USAGE: linc <exisiting> <alias>" 1 WARN
   else
		if [ -L ${Target} ]
		then
			rm ${Target}
      	ln -s ${Source} ${Target}
		elif [ -e ${Target} ]
		then
			errep "Cannot use ${Target} to create a symbolic link this way" 1 ERROR
		else
			ln -s ${Source} ${Target}
		fi
   fi
}

##################################################################
#unalias tools_sstr
##################################################################
function tools_sstr
{
	typeset sBuffer=$1
	typeset sValue=$2

	typeset sRetCode=0
	if (( $# != 2 ))
	then
		errep "USAGE: tools_sstr <str> <value>" ${ARG_NUMBER_ERROR} ERROR
	else
		sRetCode=$(print "${sBuffer}" | grep "${sValue}" >/dev/null 2>&1; print $?)
	fi
	print "${sRetCode}"	
}

##################################################################
#unalias tools_mkRandom
##################################################################
function tools_mkRandom
{
	typeset qty=$1
	typeset lLim=$2
	typeset uLim=$3

	typeset aRandCache
	typeset bDup=0
	if (( $# != 3 ))
	then
		errep "USAGE: tools_mkRandoms <qty> <lLim> <uLim>" ${ARG_NUMBER_ERROR} ERROR
	else
		typeset nCount=0
		while (( ${nCount} < ${qty} )) 
		do
			typeset nRandom=$(($RANDOM*2/1000))
			if (( ${nRandom} <= ${uLim} ))
			then
				bDup=$(tools_sstr "${aRandCache[*]}" ${nRandom})
				if (( bDup == 1 ))
				then
					#print ${aRandCache[*]}
					aRandCache[${nCount}]="${nRandom}" 
					print "${nRandom}"
					nCount=$((nCount+1))
				fi
			else
				continue
			fi
		done
	fi
}

##################################################################
#unalias tools_mpk
##################################################################
function tools_mpk
{
	typeset pIDs="$*"
   if (( $# > 0 ))
	then
		for i in $(print ${pIDs})
		do
			ps -fu ${LOGNAME} | grep "${i}" >/dev/null 2>&1
			if (( $? == 0 ))
			then
				kill -kill ${i}
			else
				errep "PID:${i} does not exist -- skipping..." 0 AUDIT
			fi
		done
	else
		errep "USAGE: mpk <PID list>" 0 AUDIT
	fi
}	

##################################################################
#unalias tools_explode
##################################################################
function tools_explode
{
	typeset sTarFile=$1
	tar xvf ${sTarFile}
	tools_clean -s -f ${sTarFile}
}

##################################################################
#unalias tools_print
##################################################################
function tools_print
{
	typeset files=""
	typeset titles=""
	typeset copies=1
	typeset count=0

	typeset usage="qlp <-c copies> <-p printer> <-t title(s)> <-f file(s)>"

	if (( $# == 0 ))
	then
		errep "${usage}" 3 WARN
		return 3
	fi

	while getopts ":f:t:p:c:" opt;
	do
		case $opt in
				c ) copies=${OPTARG} ;;
				p ) printer=${OPTARG} ;;
				t ) set -A titles $(print ${OPTARG}) ;;
				f ) set -A files $(print ${OPTARG}) ;;
				\? ) errep "${usage}" 1 WARN
				return 1 ;;
		esac
	done

	if [ -z ${copies} ]
	then
		copies=1
	fi

	if (( copies > 0 ))
	then
		while (( count < copies ))
		do
			if [ -e ${files[${count}]} ]
			then
				if [ -z ${printer} ]
				then
					pr -Ftn ${files[${count}]} | \
					/usr/lib/lp/postscript/postprint -fcourier -l78 -s8 -pp | \
					lp -t "${titles[${count}]}"
				else
					pr -Ftn ${files[${count}]} | \
					/usr/lib/lp/postscript/postprint -fcourier -l78 -s8 -pp | \
					lp -d ${printer} -t "${titles[${count}]}"
				fi
			else
				errep "${titles[${count}]} does not exist" 2 ERROR
			fi
			(( count = count + 1 ))
		done
	else
		errep "${copies} copies requested.  Not printing." 1 WARN
	fi
}

###############################################
# tools_setPuttyTitle
###############################################
function tools_setPuttyTitle {
  if [ "$TERM" == "xterm" ] ; then
# Remove the old title string in the PS1, if one is already set.
    PS1=`echo $PS1 | sed -r 's/^\\\\\[.+\\\\\]//g'`
    export PS1="\[\033]0;$1 - \u@\h:\w\007\]$PS1"
    else
      echo "You are not working in xterm. I cannot set the title."
      fi
}

###############################################
# Common Command Line Aliases
###############################################
alias cd..="cd .."
alias ls="${sLs} --color=auto -la"
alias colors="set | grep -i color | more"
alias fonts="set | grep -i font | more"
alias schemes="set | grep -i schemes | more"

###############################################
# Common Function Aliases
###############################################

alias b=goBack
alias pme=tools_pme
alias clean=tools_clean
alias vix=tools_vix
alias linc=tools_setSymbolic
alias mpk=tools_mpk
alias qlp=tools_print
alias ptitle=tools_setPuttyTitle
alias cd=_cd
